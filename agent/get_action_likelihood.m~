function [ likelihood ] = get_action_likelihood(as, rs, alpha, beta, rewards, initial_Q)
%GET_ACTION_LIKELIHOOD For single state only

%For 2-armed bandit

% action1_reward = [0.9, 1; 0.1 0];
% action2_reward = [0.8, 1; 0.2 0];
% rewards = {action1_reward, action2_reward};

Q = initial_Q;

likelihood = 1;


for i = 1:size(as,1)
    unnormalized_p_as = [exp(beta * Q(1)), exp(beta * Q(2))];
    normalized_p_as = [exp(beta * Q(1)), exp(beta * Q(2))] / sum(unnormalized_p_as);
    
    likelihood = likelihood * normalized_p_as(as(i,1))
    
    
    %sample from reward pmf
    reward_pmf = rewards{action};
    reward = -1;
    for j = 1:size(reward_pmf,1)
        random_value = rand(1);
        if random_value < reward_pmf(j,1)
            reward = reward_pmf(j,2);
        end
    end
    rs(i,1)=reward;
    % end sampling
    
    TD_error = reward - Q(action);
    Q(action) = Q(action) + alpha * TD_error;
    Qs(i + 1,:) = Q;
    
    
end

%returns Qs, as, ys
% plot(Qs)

end

