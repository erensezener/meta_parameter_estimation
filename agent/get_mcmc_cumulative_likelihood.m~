function [ alpha, beta ] = get_mcmc_cumulative_likelihood(as, rs, ss)
%GET_MCMC_CUMULATIVE_LIKELIHOOD Summary of this function goes here
%   Detailed explanation goes here

gamma_range = [0.5, 0.99];
alpha_range = [0.001, 0.99];
beta_range = [0.001, 5];
step_size = 0.05;
initial_Q = [0, 0; 0, 0];
number_of_iterations = 5000;

% get range lengths
alpha_range_length = (alpha_range(2) - alpha_range(1));
beta_range_length = (beta_range(2) - beta_range(1));
gamma_range_length = (gamma_range(2) - gamma_range(1));

% get initial values
initial_alpha = alpha_range_length * rand(1) + alpha_range(1);
initial_beta = beta_range_length * rand(1) + beta_range(1);
initial_gamma = gamma_range_length * rand(1) + gamma_range(1);
%

likelihood = get_action_likelihood_two_states(as, rs, ss, initial_alpha, initial_beta, initial_gamma, initial_Q);

for i = 1:number_of_iterations
    
    %hack to obtain only positive alphas and betas
%     [alpha_prime, beta_prime] = circular_uniform(alpha_beta(1), alpha_beta(2), step_radius);
%     alpha_beta_prime = [alpha_prime, beta_prime];

    
    while nnz(alpha_beta_prime > [0,0]) < 2 || nnz(alpha_beta_prime < [1,5]) < 2
        [alpha_prime, beta_prime] = circular_uniform(alpha_beta(1), alpha_beta(2), step_radius);
        alpha_beta_prime = [alpha_prime, beta_prime];
    end
    alpha_beta_prime = [alpha_prime, beta_prime];
    %end hack

    likelihood_prime = get_action_likelihood_two_states(as, rs, ss, alpha_beta_prime(1), alpha_beta_prime(2),gamma, initial_Q);
    if likelihood_prime < likelihood || rand(1) < exp(likelihood - likelihood_prime)
        alpha_beta = alpha_beta_prime;
        likelihood = likelihood_prime;
    end
end
    
alpha = alpha_beta(1);
beta = alpha_beta(2);

end

